{"version":3,"sources":["reducers/Calculator.js","actions/Calculator.js","components/Calculator.js","components/ResultList.js","components/Button.js","components/CalculatorSingleInput.js","components/Clear.js","components/Ans.js","components/Delete.js","components/CalcLayout.js","components/Nav.js","index.js"],"names":["calculatorReducer","state","input","inputOne","inputTwo","operator","result","expression","counter","action","type","newInputOne","payload","newInputTwo","newResultList","push","payloadTwo","newOperation","newInput","newInputExpression","slice","length","console","log","addNewResult","addNewInputVariable","setInputVariable","Calculator","props","useSelector","operation","dispatch","useDispatch","className","onSubmit","event","preventDefault","x","parseInt","y","z","addition","subtraction","multiplication","division","htmlFor","id","onChange","e","target","value","ResultsList","results","map","index","key","Button","text","onClick","CalculatorSingleInput","userInput","numbersArray","split","operationsArray","operationsArrayTrimmed","join","trim","multiIndex","indexOf","ans","Number","splice","divideIndex","addIndex","subIndex","Clear","Answer","lastResult","Delete","currentInput","CalculatorLayout","inputState","Ans","Nav","to","calculatorStore","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","store","path","exact","document","getElementById"],"mappings":"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","file":"static/js/main.b1a685ca.chunk.js","sourcesContent":["/**\r\n * Redux Reducer(s)\r\n * A reducer will actually carry out the request or\r\n * data mutation. It is expecting an \"action\" to be\r\n * passed that matches a type programmed-in.\r\n */\r\n\r\nconst calculatorReducer = (\r\n  state = {\r\n    input: \"\",\r\n    inputOne: 0,\r\n    inputTwo: 0,\r\n    operator: \"+\",\r\n    result: [],\r\n    expression: [],\r\n    counter: 0\r\n  },\r\n  action) => {\r\n  switch (action.type) {\r\n    case (\"ADD_INPUT_ONE\"):\r\n      {\r\n        // First copy the previous state.\r\n        const newInputOne = {...state};\r\n\r\n        // Add the new input.\r\n        newInputOne.inputOne = (action.payload);\r\n\r\n        // Return the update state.\r\n        return newInputOne;\r\n      }\r\n      case (\"ADD_INPUT_TWO\"):\r\n      {\r\n        // First copy the previous state.\r\n        const newInputTwo = {...state};\r\n\r\n        // Add the new input.\r\n        newInputTwo.inputTwo = (action.payload);\r\n        \r\n        // Return the update state.\r\n        return newInputTwo;\r\n      }\r\n    case (\"CALCULATE\"): {\r\n      // First copy the previous state.\r\n      const newResultList = {...state};\r\n\r\n      // Add the new result.\r\n      newResultList.result.push(action.payload);\r\n\r\n      // Add the new expression\r\n      newResultList.expression.push(action.payloadTwo);\r\n\r\n      // Update the operation counter. React recognizes that this element has changed\r\n      // and will cause a re-render of the page.\r\n      // React will not detect a change if we simply add or remove from the result list.\r\n      // -> No re-render of the page.\r\n      newResultList.counter++;\r\n\r\n      // Return the updated state (overwrites the state.)\r\n      return newResultList;\r\n    }\r\n    case (\"ADD_NEW_OPERATION\"): {\r\n      const newOperation = {...state};\r\n      newOperation.operator = action.payload;\r\n      return newOperation;\r\n    }\r\n    case (\"ADD_NEW_VARIABLE\"): {\r\n      const newInput = {...state};\r\n      newInput.input += action.payload;\r\n      return newInput;\r\n    }\r\n    case (\"SET_INPUT_VARIABLES\"): {\r\n      const newInputExpression = {...state};\r\n      newInputExpression.input = action.payload;\r\n      return newInputExpression;\r\n    }\r\n    case (\"DELETE_INPUT_VARIABLE\"): {\r\n      const newInputExpression = {...state};\r\n      newInputExpression.input.slice(0, (newInputExpression.input.length-2));\r\n      console.log(newInputExpression.input);\r\n      return newInputExpression;\r\n    }\r\n    default:\r\n      // Make no change if the action doesn't match\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default calculatorReducer;","/**\r\n * Redux Action(s)\r\n * Actions as \"request\" formatting, or labels for what\r\n * we'll allow in terms of requests or mutations for \r\n * our store.\r\n * Actions define what we'll allow as reuqests to our\r\n * reducers (which in turn, speak directly with the store\r\n *  on our behalf.)\r\n * Action names, by cc onverntion, are uppercase (they are \r\n * considered \"CONSTANTS\")\r\n */\r\n\r\nconst addNewInputOne = input => {\r\n  return {\r\n    // actions return objects\r\n    type: 'ADD_INPUT_ONE',\r\n    payload: input\r\n  };\r\n};\r\n\r\nconst addNewInputTwo = input => {\r\n  return {\r\n    // actions return objects\r\n    type: 'ADD_INPUT_TWO',\r\n    payload: input\r\n  };\r\n};\r\n\r\nconst addNewOperation = input => {\r\n  return {\r\n    type: 'ADD_NEW_OPERATION',\r\n    payload: input\r\n  }\r\n}\r\n\r\nconst addNewResult = (result, expression) => {\r\n  return {\r\n    // actions return objects\r\n    type: \"CALCULATE\",\r\n    payload: result,\r\n    payloadTwo: expression\r\n  };\r\n};\r\n\r\n// New Calculator with button actions\r\nconst addNewInputVariable = input => {\r\n  return {\r\n    type: \"ADD_NEW_VARIABLE\",\r\n    payload: input\r\n  };\r\n};\r\n\r\nconst setInputVariable = input => {\r\n  return {\r\n    type: \"SET_INPUT_VARIABLES\",\r\n    payload: input\r\n  };\r\n};\r\n\r\nconst deleteInputVariable = () => {\r\n  return {\r\n    type: \"DELETE_INPUT_VARIABLE\",\r\n  }\r\n}\r\n\r\nexport { addNewInputOne, addNewInputTwo, addNewResult, addNewOperation, addNewInputVariable, setInputVariable, deleteInputVariable };","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { addNewInputOne, addNewInputTwo, addNewResult, addNewOperation } from '../actions/Calculator';\r\n\r\nconst Calculator = props => {\r\n  // State initialization\r\n  const inputOne = useSelector(state => state.inputOne);\r\n  const inputTwo = useSelector(state => state.inputTwo);\r\n  const operation = useSelector(state => state.operator);\r\n  const dispatch = useDispatch();\r\n\r\n  // Arithmetic functions\r\n  const addition = (x, y) => {\r\n    return x + y;\r\n  };\r\n\r\n  const subtraction = (x, y) => {\r\n    return x - y;\r\n  };\r\n\r\n  const multiplication = (x, y) => {\r\n    return x * y;\r\n  };\r\n\r\n  const division = (x, y) => {\r\n    return x / y;\r\n  };\r\n\r\n  // Calculate function\r\n  const calculate = (event) => {\r\n    // Prevent the page from reloading when we run the calculate function\r\n    event.preventDefault();\r\n    const x = parseInt(inputOne);\r\n    const y = parseInt(inputTwo);\r\n\r\n    // Set / overwrite the state of the result\r\n    switch (operation) {\r\n      case \"+\":\r\n        {\r\n          const z = addition( x , y);\r\n          dispatch(addNewResult(z, `${x} + ${y} = ${z}`) );\r\n          break;\r\n        }\r\n      case \"-\":\r\n        {\r\n          const z = subtraction( x , y )\r\n          dispatch(addNewResult(z ,`${x} - ${y} = ${z}` ) );\r\n          break;\r\n        }\r\n      case \"*\":\r\n        {\r\n          const z = multiplication( x , y )\r\n          dispatch(addNewResult( z ,`${x} * ${y} = ${z}` ) );\r\n          break;\r\n        }\r\n      case \"/\":\r\n        {\r\n          const z = division( x , y )\r\n          dispatch(addNewResult( z , `${x} / ${y} = ${z}`) );\r\n          break;\r\n        }\r\n      default:\r\n        return 0;\r\n    };\r\n  };\r\n  \r\n  // Return JSX\r\n  return (\r\n    <div>\r\n      <h1 className=\"title\">Welcome to my Calculator!</h1>\r\n      <h3>Head to the Results page to see your results!</h3>\r\n      <form onSubmit={calculate}>\r\n        <label htmlFor=\"input-1\">Input 1:</label>\r\n        <input type=\"number\" id=\"input-1\" onChange={e => { dispatch(addNewInputOne(e.target.value)) }}></input>\r\n        <label htmlFor=\"operations\">Operation:</label>\r\n        <select onChange={e => { dispatch(addNewOperation(e.target.value)) }} id=\"operations\">\r\n          <option value=\"+\">+</option>\r\n          <option value=\"-\">-</option>\r\n          <option value=\"*\">*</option>\r\n          <option value=\"/\">/</option></select>\r\n        <label htmlFor=\"input-2\">Input 2:</label>\r\n        <input type=\"number\" id=\"input-2\" onChange={e => { dispatch(addNewInputTwo(e.target.value)) }}></input>\r\n        <input id=\"bttn\" type=\"submit\" value=\"calculate\" />\r\n      </form>\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default Calculator;","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport './ResultList.css';\r\n\r\nconst ResultsList = () => {\r\n  const results = useSelector(state => state.expression);\r\n\r\n  // Special thanks to Zhen(Alex) Liu for showing \r\n  // and helping me with the useEffect function.\r\n\r\n  // The useSelect has useEffect built into it\r\n  // This function will track the expression counter state\r\n  // When the counter goes up then the page will re-render.\r\n  const counter = useSelector(state => state.counter);\r\n\r\n  return (\r\n    <div>\r\n      <h1>Previous Results:</h1>\r\n      <ul>\r\n        {results.map((result, index) => {\r\n          return (\r\n            <li className=\"resultExpressions\" key={index}>{result}</li>\r\n          )\r\n        })}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ResultsList;","import React from 'react';\r\nimport './button.css'\r\nimport { useDispatch } from 'react-redux';\r\nimport { addNewInputVariable } from '../actions/Calculator';\r\n\r\n\r\nconst Button = props => {\r\n  // Set the button to be the prop we pass into the component\r\n  const text = props.text;\r\n  const dispatch = useDispatch();\r\n\r\n  // Create a onClick function for adding the text to the input state\r\n  const addInputVariable = () => {\r\n    // Action to add to input state\r\n    dispatch(addNewInputVariable(text));\r\n  };\r\n\r\n  // Output the button\r\n  return (\r\n    <>\r\n      <button onClick={addInputVariable}>\r\n        {text}\r\n      </button>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Button;","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { addNewResult } from '../actions/Calculator';\r\n\r\nconst CalculatorSingleInput = props => {\r\n  //State initialization.\r\n  const text = props.text;\r\n  const userInput = useSelector(state => state.input);\r\n  const dispatch = useDispatch();\r\n\r\n  // First create an array with only the numbers we need to work with.\r\n  let numbersArray = userInput.split(/[+-/\\\\*\\\\]/);\r\n\r\n  // Create an array with just the operations we are working with.\r\n  let operationsArray = userInput.split(/[0123456789]/);\r\n\r\n  // Remove the empty cell at the end.\r\n  operationsArray = operationsArray.slice(1, operationsArray.length - 1);\r\n\r\n  // Arithmetic functions.\r\n  const addition = (x, y) => {\r\n    return x + y;\r\n  };\r\n\r\n  const subtraction = (x, y) => {\r\n    return x - y;\r\n  };\r\n\r\n  const multiplication = (x, y) => {\r\n    return x * y;\r\n  };\r\n\r\n  const division = (x, y) => {\r\n    return x / y;\r\n  };\r\n\r\n  // Calculate function\r\n  const calculate = (event) => {\r\n    // Prevent the page from reloading when we run the calculate function\r\n    event.preventDefault();\r\n\r\n    // Remove the \"\" cells inside the operations array\r\n    let operationsArrayTrimmed = operationsArray.join(\"\").trim().split(\"\");\r\n\r\n    while (operationsArrayTrimmed.length >= 1 && operationsArrayTrimmed[0] !== \"\") {\r\n      // Check for multiplication first\r\n      let multiIndex = operationsArrayTrimmed.indexOf(\"*\");\r\n      while (multiIndex >= 0) {\r\n        const ans = multiplication(Number(numbersArray[multiIndex]), Number(numbersArray[multiIndex + 1]));\r\n        // Removing the operation from the operation array.\r\n        operationsArrayTrimmed.splice(multiIndex, 1);\r\n\r\n        // Removing the two numbers used in the operation and replacing with the result.\r\n        numbersArray.splice(multiIndex, 2, ans);\r\n\r\n        // Check to see if anymore multiplication\r\n        multiIndex = operationsArrayTrimmed.indexOf(\"*\");\r\n      };\r\n\r\n      // Check for division next\r\n      let divideIndex = operationsArrayTrimmed.indexOf(\"/\");\r\n      while (divideIndex >= 0) {\r\n        const ans = division(Number(numbersArray[divideIndex]), Number(numbersArray[divideIndex + 1]));\r\n        // Removing the operation from the operation array.\r\n        operationsArrayTrimmed.splice(divideIndex, 1);\r\n\r\n        // Removing the two numbers used in the operation and replacing with the result.\r\n        numbersArray.splice(divideIndex, 2, ans);\r\n\r\n        // Check to see if anymore division.\r\n        divideIndex = operationsArrayTrimmed.indexOf(\"/\");\r\n      };\r\n\r\n      // Check for addition\r\n      let addIndex = operationsArrayTrimmed.indexOf(\"+\");\r\n      while (addIndex >= 0) {\r\n        const ans = addition(Number(numbersArray[addIndex]), Number(numbersArray[addIndex + 1]));\r\n        // Removing the operation from the operation array.\r\n        operationsArrayTrimmed.splice(addIndex, 1);\r\n\r\n        // Removing the two numbers used in the operation and replacing with the result.\r\n        numbersArray.splice(addIndex, 2, ans);\r\n\r\n        // Check to see if anymore addition.\r\n        console.log(numbersArray);\r\n        addIndex = operationsArrayTrimmed.indexOf(\"+\");\r\n      };\r\n\r\n      // Check for subtraction\r\n      let subIndex = operationsArrayTrimmed.indexOf(\"-\");\r\n      while (subIndex >= 0) {\r\n        const ans = subtraction(Number(numbersArray[subIndex]), Number(numbersArray[subIndex + 1]));\r\n        // Removing the operation from the operation array.\r\n        operationsArrayTrimmed.splice(subIndex, 1);\r\n\r\n        // Removing the two numbers used in the operation and replacing with the result.\r\n        numbersArray.splice(subIndex, 2, ans);\r\n\r\n        // Check to see if anymore division.\r\n        subIndex = operationsArrayTrimmed.indexOf(\"-\");\r\n      };\r\n    };\r\n\r\n    // Set the result state to the only number left (the result).\r\n    dispatch(addNewResult(numbersArray[0], `${userInput} = ${numbersArray[0]}`));\r\n  };\r\n\r\n  return (\r\n    <button id=\"calculatebttn\" onClick={calculate}>\r\n      {text}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default CalculatorSingleInput;","import React from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { setInputVariable } from '../actions/Calculator';\r\n\r\nconst Clear = (props) => {\r\n  const text = props.text;\r\n  const dispatch = useDispatch();\r\n\r\n  const ClearInput = () => {\r\n    // Set the global input to be blank\r\n    dispatch(setInputVariable(\"\"));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <button onClick={ClearInput}>\r\n        {text}\r\n      </button>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Clear;","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { addNewInputVariable } from '../actions/Calculator';\r\n\r\nconst Answer = (props) => {\r\n  const text = props.text;\r\n  const dispatch = useDispatch();\r\n  \r\n  // Grab the global state results\r\n  const results = useSelector(state => state.result);\r\n\r\n  const LastResult = () => {\r\n    // Grab the last element in the results array\r\n    const lastResult = results[results.length-1];\r\n    \r\n    // Update the input state with the last element in the results\r\n    dispatch(addNewInputVariable(lastResult));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <button onClick={LastResult}>\r\n        {text}\r\n      </button>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Answer;","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { setInputVariable } from '../actions/Calculator';\r\n\r\nconst Delete = (props) => {\r\n  const text = props.text;\r\n  const dispatch = useDispatch();\r\n  \r\n  // Grab the global input state\r\n  const currentInput = useSelector(state => state.input);\r\n\r\n  const deleteLastInput = () => {\r\n    // Grab the input string and take away the last number\r\n    const newInput = currentInput.slice(0, currentInput.length-1);\r\n    \r\n    // Update the store\r\n    dispatch(setInputVariable(newInput));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <button onClick={deleteLastInput}>\r\n        {text}\r\n      </button>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Delete;","import React from 'react';\r\nimport Button from './Button';\r\nimport { setInputVariable } from '../actions/Calculator';\r\nimport CalcButton from '../components/CalculatorSingleInput';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport Clear from './Clear';\r\nimport Ans from './Ans';\r\nimport Delete from './Delete';\r\nimport './CalcLayout.css';\r\n\r\nconst CalculatorLayout = () => {\r\n  const dispatch = useDispatch();\r\n  const inputState = useSelector(state => state.input);\r\n\r\n  return (\r\n    <div className=\"singleCalculatorContainer\">\r\n      <section className=\"headers\">\r\n        <h1>Welcome to my React Calculator!</h1>\r\n        <h3>Head to the Results page to see your results!</h3>\r\n      </section>\r\n      <div className=\"calculatorContainer\">\r\n        <input\r\n          id=\"expressions\"\r\n          type=\"text\"\r\n          value={inputState}\r\n          onChange={event => { dispatch(setInputVariable(event.target.value)) }}>\r\n        </input>\r\n        <div className=\"row\" id=\"row3\">\r\n          <Button text=\"7\" />\r\n          <Button text=\"8\" />\r\n          <Button text=\"9\" />\r\n          <Button text=\"+\" />\r\n          <Button text=\"-\" />\r\n        </div>\r\n        <div className=\"row\" id=\"row2\">\r\n          <Button text=\"4\" />\r\n          <Button text=\"5\" />\r\n          <Button text=\"6\" />\r\n          <Button text=\"*\" />\r\n          <Button text=\"/\" />\r\n        </div>\r\n        <div className=\"row\" id=\"row1\">\r\n          <Button text=\"1\" />\r\n          <Button text=\"2\" />\r\n          <Button text=\"3\" />\r\n          <Delete text=\"Del\" />\r\n          <Clear text=\"Clear\" />\r\n        </div>\r\n        <div className=\"row\" id=\"row0\">\r\n          <Button text=\"0\" />\r\n          <Button text=\".\" />\r\n          <Ans text=\"Ans\" />\r\n          <CalcButton text=\"=\" />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CalculatorLayout;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport './Nav.css';\r\n\r\nfunction Nav() {\r\n  return (\r\n    <nav>\r\n      <h2>Calculator Navigation</h2>\r\n      <ul>\r\n        <li className=\"nav-links\">\r\n          <Link to=\"/\">Double Input Calc</Link>\r\n        </li>\r\n        <li className=\"nav-links\">\r\n        <Link to=\"/results\">Results</Link>\r\n        </li>\r\n        <li className=\"nav-links\">\r\n        <Link to=\"/singleCalc\">Interactive Calc</Link>\r\n        </li>\r\n      </ul>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Nav;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport { createStore } from 'redux';\r\nimport calculatorReducer from './reducers/Calculator';\r\nimport { Provider } from 'react-redux';\r\nimport Calculator from './components/Calculator';\r\nimport ResultsList from './components/ResultList';\r\nimport CalculatorLayout from './components/CalcLayout';\r\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\r\nimport Nav from './components/Nav';\r\n\r\n// STORE\r\nconst calculatorStore = createStore(\r\n  calculatorReducer,\r\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n);\r\n\r\nReactDOM.render(\r\n  <Provider store={calculatorStore}>\r\n    <Router>\r\n      <Nav />\r\n      <Route path=\"/\" exact>\r\n        <Calculator />\r\n      </Route>\r\n      <Route path=\"/results\" exact>\r\n        <ResultsList />\r\n      </Route>\r\n      <Route path=\"/singleCalc\" exact>\r\n        <CalculatorLayout />\r\n      </Route>\r\n    </Router>\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}